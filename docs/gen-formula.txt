gen-symbol.lisp

1. 発生分布を指定して記号を発生する
 1) 関数、述語、0引数記号の3つにわけて記号リストを持つ
　　このリストの記号に発生頻度を指定し、全体が1.0になるように発生させる

 2) ((s1 d1)(s2 d2)...(sk dk))のような定義構造になる
　　このとき、d1,d2,..,dkは整数で、角記号はdi/Σj dj になる
 3) 処理
　　　このデータをもとに累積表をつくる
　　　acc = ((s1 m1)(s2 m2)...(sk mk))
      m0 = 0
      mi = mi-1 + di

　　　あるいは
　　　prob = ((s1 m1/mk)(s2 m2/mk)...(sk 1.0))
　　　とする

　　　処理場、accだと乱数からsiを探す時、mkを持ち回る必要があるので
　　　probのほうがよい。
　　　ただし、こちらはfloat計算が必要になる。lispの場合rationalが使えるので、気にしなくてもいいのかも。

　　持ち方
　　　このaccリストで、発生確率をコントロールする。
　　　siのproperty acc に miを持たせることもできる。
　　　しかし、
　　　(p q r)と(p f g)のように別の定義リストに同じ記号があったり、発生分布を変えたい
　　　たとえば(f g h)と(a f g h)のように２週類。
　　　こういうときは、記号の出現頻度を変える必要があるのでpropertyは具合が悪そう


　定義のしかた　#argsを含む場合
　　
   1)  ((s1 n1 d1)(s2 n2 d2)...(sk n2 dk))のように#argsを含める
　　このとき、d1,d2,..,dkは整数で、角記号はdi/Σj dj になる
   2) #argsと頻度を別のリストで定義する
     nargdef) ((s1 n1)(s2 n2)...(sk nk))
     distdef) ((s1 d1)(s2 d2)...(sk dk))

　また、関数と定数/変数の0argsを分けて定義する必要がある(depth-limitのため)
     nargdef, distdef, 0argdef


gen-term.lisp
  generate term

  1. depth
    depth=0になったら、*0symacc* からシンボルをとる

　2. (gen-term depth)
    *funacc*から関数名Fをとる
　　Fのnargs(*fundef*)が0なら定数なので引数は作らない
　　Fのnargs(*fundef*)が0より大きいなら、引数を作る。
　　　このときdepthを-1 する。

  3. (gen-term* nargs depth)
    nargs個のtermのリストを生成する。


  4. (gen-atomic psym depth)
      *predef*参照
      atomicを生成する。ただし、psymを使用する。

  5. (nargsof sym def)
　　　defを参照してsymのnargsを求める

